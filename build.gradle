// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

repositories {
  maven {
    // location of the maven that hosts JEI files
    url "http://dvs1.progwml6.com/files/maven"
  }
}

ext.configFile = file "build.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.ow2.asm' && details.requested.name == 'asm-debug-all' && details.requested.version == '4.1') {
            //prefer different version which contains some necessary fixes
            details.useVersion '5.0.1'
        }
    }
}

apply plugin: 'java'

def buildnumber = System.getenv("BUILD_NUMBER") ?: "1"

version = "${config.version.major}.${config.version.minor}.${config.version.patch}" + "." + buildnumber.toString()
group= "${config.version.modid_base}.${config.version.modid}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${config.version.modid}"

sourceCompatibility = targetCompatibility = "1.7" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.7"
}

defaultTasks 'build'

minecraft {
    version = "${config.version.minecraft}-${config.version.forge}"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "${config.version.mappings}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

processResources
{
	// this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    version = "${project.minecraft.version}-${project.version}"
    classifier = 'universal'
    manifest {
        attributes("FMLCorePlugin": "net.petercashel.RealTime.RealTimeFMLLoadingPlugin", "FMLCorePluginContainsFMLMod": "RealTime")
    }
}

// Add in an mcp named jar, for those who wish to run in a development environment (assuming mcp naming matches)
task deobfJar(type: Jar) {
	from sourceSets.main.output
	classifier = 'deobf'
    version = "${project.minecraft.version}-${project.version}"
    manifest {
        attributes("FMLCorePlugin": "net.petercashel.RealTime.RealTimeFMLLoadingPlugin")
    }
}

task PomJar(type: Jar) {
	from sourceSets.main.output
	version = "${project.minecraft.version}-${project.version}"
}

// Tell the artifact system about our extra jars
artifacts {
	archives sourceJar, deobfJar, PomJar
}

task copyFiles(type: Copy) {
    dependsOn 'reobf','PomJar'
    
    def inputFile = project.archivesBaseName + '-' + project.minecraft.version + '-' + project.version + '-universal.jar'
    def outputFile = project.archivesBaseName + '-' + project.minecraft.version + '-' + project.version + '.jar'
    
    from ('build/libs/')
    into ('build/libs/')
    include (inputFile)
    rename (inputFile, outputFile)
}
